version = 1


[install]
gum.pkg-path = "gum"

# PostgreSQL versions:
postgresql.pkg-path = "postgresql_16"
#postgresql.pkg-path = "postgresql_15"
#postgresql.pkg-path = "postgresql_14"
#postgresql.pkg-path = "postgresql_13"
#postgresql.pkg-path = "postgresql_12"
#postgresql.pkg-path = "postgresql_11"
#postgresql.pkg-path = "postgresql_10"


[vars]
PGHOSTADDR = "127.0.0.1"
PGPORT = "15432"
PGUSER = "pguser"
PGPASS = "pgpass"
PGDATABASE = "pgdb"


[hook]
on-activate = '''

export PGDIR="$FLOX_ENV_CACHE/postgres"
export PGDATA=$PGDIR/data
export PGHOST=$PGDIR/run
export PGCONFIGFILE="$PGDIR/postgresql.conf"
export LOG_PATH=$PGHOST/LOG
export SESSION_SECRET="$USER-session-secret"
export DATABASE_URL="postgresql:///$PGDATABASE?host=$PGHOST&port=$PGPORT"

if [[ ! -d "$PGHOST" ]]; then
  mkdir -p "$PGHOST"
fi

if [[ ! -d "$PGDATA" ]]; then
  mkdir -p "$PGDATA"
  pg_initdb() {
    initdb "$PGDATA" \
      --locale=C \
      --encoding=UTF8 \
      -A md5 \
      --auth=trust \
      --username $PGUSER \
      --pwfile=<(echo $PGPASS)
  }
  export -f pg_initdb  # This is needed for gum to be able to call function
  if [[ "$FLOX_ENVS_TESTING" == "1" ]]; then
    pg_initdb
  else
    gum spin --spinner dot --title "Running initdb in $PGDATA" -- bash -c pg_initdb
  fi
  echo "âœ… Initialize PostgreSQL ($PGDATA)"

fi


#
if [[ ! -f "$PGCONFIGFILE" ]]; then
  tee -a $PGCONFIGFILE > /dev/null << EOF
listen_addresses = '$PGHOSTADDR';
port = '$PGPORT';
unix_socket_directories = '$PGHOST';
unix_socket_permissions = '0700';
EOF
  echo "âœ… Configure PostgreSQL ($PGCONFIGFILE)"
fi

pg_ctl -D "$PGDATA" -w start -o "-c unix_socket_directories=$PGHOST -c listen_addresses=$PGHOSTADDR -p $PGPORT" > /dev/null
if psql -lqt | cut -d \| -f 1 | grep -qw $PGDATABASE; then
  echo "âœ… Database '$PGDATABASE' already exists"
else
  createdb
  echo "âœ… Database '$PGDATABASE' created"
fi
pg_ctl -D "$PGDATA" -m fast -w stop > /dev/null

gum style --border double --margin "1 2" --padding "1 4" \
  'Start PostgreSQL in the background:' \
  '  ðŸ‘‰ flox services start' \
  '  ðŸ‘‰ flox activate --start-services' '' \
  'Try to connect to PostgreSQL:' \
  '  ðŸ‘‰ psql' '' \
  'Connection information:' \
  "  listen_addresses=$PGHOSTADDR" \
  "  port=$PGPORT"

'''

[services]
postgres.command = "postgres -D $PGDATA -c unix_socket_directories=$PGHOST -c listen_addresses=$PGHOSTADDR -p $PGPORT"


[options]
systems = [
  "aarch64-darwin",
  "aarch64-linux",
  "x86_64-darwin",
  "x86_64-linux",
]
